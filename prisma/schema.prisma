// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

enum Role {
   USER
   ADMIN
}

model User {
   id            String   @id @default(uuid())
   email         String   @unique
   password      String // Hashed password
   role          Role     @default(USER)
   emailVerified Boolean  @default(false)
   createdAt     DateTime @default(now())
   updatedAt     DateTime @updatedAt

   // Relations
   refreshTokens           RefreshToken[]
   emailVerificationTokens EmailVerificationToken[]
   passwordResetTokens     PasswordResetToken[]

   @@map("users")
}

model RefreshToken {
   id         String   @id @default(uuid())
   token      String   @unique
   userId     String
   expiresAt  DateTime
   createdAt  DateTime @default(now())
   isRevoked  Boolean  @default(false)
   replacedBy String? // ID of the token that replaced this one
   userAgent  String?
   ipAddress  String?

   // Relations
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("refresh_tokens")
}

model EmailVerificationToken {
   id        String   @id @default(uuid())
   token     String   @unique
   userId    String
   expiresAt DateTime
   createdAt DateTime @default(now())
   used      Boolean  @default(false)

   // Relations
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("email_verification_tokens")
}

model PasswordResetToken {
   id        String   @id @default(uuid())
   token     String   @unique
   userId    String
   expiresAt DateTime
   createdAt DateTime @default(now())
   used      Boolean  @default(false)

   // Relations
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("password_reset_tokens")
}
